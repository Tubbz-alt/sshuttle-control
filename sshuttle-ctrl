#!/bin/bash

# set the default server which is used
defaulthost=home


cmd=$1
action=$2
host=$3

if [[ $host = "" ]] && [[ $action != "list" ]]; then
	echo "Using default host: $defaulthost"
	host=$defaulthost
fi

piddir=/tmp/sshuttle-ctrl/$cmd
pidfile=$piddir/$host.pid
mkdir /tmp/sshuttle-ctrl/$cmd -p
# touch $pidfile;

# alias tunnel='sshuttle -D --pidfile=/tmp/sshuttle.pid -r <server> --dns 0/0'
# alias stoptunnel='[[ -f /tmp/sshuttle.pid ]] && kill `cat /tmp/sshuttle.pid`'

#Commands: tnl, vpnto, list


	# Run a complete tunnel
	if [[ $cmd = "tnl" ]]; then
		if [[ $action = "" ]]; then
			echo "Action not specified"
			echo -e "(start|stop|list)\n"
			exit 1;
		fi # end blank action check

		if  [[ $action == "list" ]]; then
			printf "\nStarted TNL Connections: \n\n"
#			ls $piddir

			for f in $(ls $piddir); do

				connection=${f%.*}

				printf "  $connection - pid id: "
				cat $piddir/$f
				printf "\n"

			done

			exit 0;
		fi


		if  [[ $action != "start" ]] &&  [[ $action != "stop" ]] &&  [[ $action != "list" ]]; then
			echo "Invalid action"
			echo -e "(start|stop|list)\n"
			exit 1;
		fi # end valid action check

		if  [[ $action == "start" ]]; then
			printf "Starting...\n"
			sudo -u $USER sshuttle --dns -D --pidfile=$pidfile -r $host 0/0
			exit 0;
		fi # end start check

		if  [[ $action == "stop" ]]; then
			printf "Stopping...\n";
			if [[ -f $pidfile ]]; then
				sudo kill `cat $pidfile`;
				rm $pidfile -f
				exit 0;
			else
				printf "This tunnel does not appear to be running.\n";
				exit 1;
			fi # end pid file existence check
		fi # End stop handler



		exit 0;

	# Move dock to different location on the same display
	elif [[ $1 = "movepos" ]]; then
		if [[ $2 = "" ]] || [[ $3 = "" ]]; then

			exit 1;
		fi


		exit 0;

	# Enable/disable icon drag locking
	elif [[ $1 = "lock" ]]; then
		if [[ $2 = "" ]]; then

			exit 1;
		elif [[ $2 -ne "0" ]] && [[ $2 -ne "1" ]]; then

			exit 1;
		fi

		lockDrag=$2

		settingPath="/apps/docky-2/Docky/Interface/DockDragTracker/LockDrags"
		settingVal=$lockDrag
		settingValType="bool"

		gconftool-2 --set "$settingPath" --type $settingValType "$settingVal"

		restartDocky
		exit 0;

	else
		echo -e "#########\nSSHuttle\n#########\n";
		echo -e "Settings which can be changed:\n";

		echo -e "* Change dock monitor:";
		echo -e "\tdockyconf movemon [dock #] [monitor #]\n\n";

		echo -e "* Change dock location on the monitor:";
		echo -e "\tdockyconf movepos [dock #] [monitor #]\n\n";

		echo -e "* Lock icons from dragging:";
		echo -e "\tdockyconf lock [0 = don't lock | 1 = lock]\n\n";

		exit 0;
	fi



# sshuttle helpers

# set default SSH server:
#   user@hostname or a host in ~/.ssh/config

# tunnel all traffic including DNS

# alias tnl="sshuttle --dns -vr $TNL_SERVER 0/0"

function tnl() {
	if [ -z "$1" ]; then
#		TNL_SERVER=office1
#		TNL_SERVER=home
#		TNL_SERVER=washington
#		TNL_SERVER=home
#		TNL_SERVER=by
		TNL_SERVER=ballweg
	else
		TNL_SERVER=$1;
	fi

	sudo -u benyanke sshuttle --dns -vr $TNL_SERVER 0/0
#	sudo sshuttle --dns -vr $TNL_SERVER 0/0
#	sshuttle --dns -vr $TNL_SERVER 0/0

}

# returns a list of IP addresses from given domain(s).
#
	# Move dock to a different display
	if [[ $1 = "movemon" ]]; then
		if [[ $2 = "" ]] || [[ $3 = "" ]]; then
			echo "Need to specify a dock and display number.";
			exit 1;
		fi

		dockNumb=$2
		displayNumb=$3

		settingPath="/apps/docky-2/Docky/Interface/DockPreferences/Dock$dockNumb/MonitorNumber"
		settingVal=$displayNumb
		settingValType="int"

		gconftool-2 --set "$settingPath" --type $settingValType "$settingVal"

		restartDocky
		exit 0;

	# Move dock to different location on the same display
	elif [[ $1 = "movepos" ]]; then
		if [[ $2 = "" ]] || [[ $3 = "" ]]; then
			echo "Need to specify a dock and a location";
			exit 1;
		fi
		# WORK ON THIS MORE
		dockNumb=$2
		displayNumb=$3

		settingPath="/apps/docky-2/Docky/Interface/DockPreferences/Dock$dockNumb/MonitorNumber"
		settingVal=$displayNumb
		settingValType="int"

		gconftool-2 --set "$settingPath" --type $settingValType "$settingVal"

		restartDocky
		exit 0;

	# Enable/disable icon drag locking
	elif [[ $1 = "lock" ]]; then
		if [[ $2 = "" ]]; then
			echo "Need to specify a setting [0 = unlock / 1 = lock].";
			exit 1;
		elif [[ $2 -ne "0" ]] && [[ $2 -ne "1" ]]; then
			echo "Please specify either 0 or 1.";
			exit 1;
		fi

		lockDrag=$2

		settingPath="/apps/docky-2/Docky/Interface/DockDragTracker/LockDrags"
		settingVal=$lockDrag
		settingValType="bool"

		gconftool-2 --set "$settingPath" --type $settingValType "$settingVal"

		restartDocky
		exit 0;

	else
		echo -e "#########\nDockyConf\n#########\n";
		echo -e "Settings which can be changed:\n";

		echo -e "* Change dock monitor:";
		echo -e "\tdockyconf movemon [dock #] [monitor #]\n\n";

		echo -e "* Change dock location on the monitor:";
		echo -e "\tdockyconf movepos [dock #] [monitor #]\n\n";

		echo -e "* Lock icons from dragging:";
		echo -e "\tdockyconf lock [0 = don't lock | 1 = lock]\n\n";

		exit 0;
	fi


# Examples:
#  dns2ip google.com
#  dns2ip netflix.com movies.netflix.com
#
function dns2ip() {
  dig +short $* | sed "/[^0-9\.]/d" # use sed to remove non-IPv4 line e.g. alias
}

# tunnel specified domain(s) only.
#
# Examples:
#  tnlonly google.com
#  tnlonly netflix.com movies.netflix.com
#
function tnlonly() {
  sshuttle -vr $TNL_SERVER `dns2ip $*`;
}

# tunnel all traffic including DNS, except the specified domain(s).
#
# Examples:
#  tnlbut youku.com
#  tnlbut youku.com weibo.com
#
function tnlbut() {
  sshuttle --dns -vr $TNL_SERVER `dns2ip $* | sed "s/^/-x/"` 0/0; # use sed to append '-x' prefix
}

# vpn to a ssh server.
#
# Examples:
#  vpnto my_office_server      # host in ~/.ssh/config
#  vpnto user@123.123.123.123
#
function vpnto() {
#  sshuttle -HNvr $1;
#  sudo sshuttle -HNvr $1;
  sudo -u benyanke sshuttle -HNvr $1;
}
